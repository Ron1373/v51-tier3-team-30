// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String  @id @db.Uuid
    username     String  @unique
    passwordHash String? @map("password_hash")
    firstName    String? @map("firstname")
    lastName     String? @map("lastname")
    email        String?
    picture      String?

    // Relations' lists
    accounts        Account[]
    groups          Group[]
    groupMembers    GroupMember[]
    createdExpenses Expense[]      @relation("expensesCreated")
    paidExpenses    Expense[]      @relation("expensesPaid")
    contributions   Contribution[]

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@index([email])
}

model Account {
    id                String @id @db.Uuid
    provider          String
    providerAccountId String @map("provider_account_id")
    userId            String @map("user_id") @db.Uuid

    active Boolean @default(true)

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Group {
    id               String  @id @db.Uuid
    creatorId        String  @map("creator_id") @db.Uuid
    groupName        String  @map("group_name")
    groupDescription String  @map("group_description")
    groupBudget      Decimal @map("group_budget") @db.Decimal(10, 2)

    // Relations' lists
    groupLinks   GroupLink[]
    groupMembers GroupMember[]
    expenses     Expense[]

    // Relations
    creator User @relation(fields: [creatorId], references: [id])

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model GroupLink {
    id          Int      @id @default(autoincrement())
    link        String
    expireAt    DateTime @map("expire_at")
    isPermanent Boolean  @default(true) @map("is_permanent")
    groupId     String   @map("group_id") @db.Uuid

    // Relations
    group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model GroupMember {
    id       String   @id @db.Uuid
    groupId  String   @map("group_id") @db.Uuid
    memberId String   @map("member_id") @db.Uuid
    joinedAt DateTime @default(now()) @map("join_at")

    // Relations
    member User  @relation(fields: [memberId], references: [id], onDelete: Cascade)
    group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Expense {
    id                 String  @id @db.Uuid
    groupId            String  @map("group_id") @db.Uuid
    expenseName        String  @map("expense_name")
    expenseDescription String  @map("expense_description")
    categoryId         Int     @map("category_id")
    amount             Decimal @db.Decimal(12, 0)
    authorId           String  @map("author_id") @db.Uuid
    payerId            String  @map("payer_id") @db.Uuid

    // Relations
    author   User     @relation("expensesCreated", fields: [authorId], references: [id])
    paidBy   User     @relation("expensesPaid", fields: [payerId], references: [id])
    group    Group    @relation(fields: [groupId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])

    // Relations' lists
    receipts      Recipt[]
    contributions Contribution[]

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model Recipt {
    id        String @id @default(cuid())
    expenseId String @map("expense_id") @db.Uuid
    fileUrl   String @map("file_url")
    metadata  Json   @db.JsonB

    // Relations
    expense Expense @relation(fields: [expenseId], references: [id])

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model Contribution {
    id            String  @id @db.Uuid
    expenseId     String  @map("expense_id") @db.Uuid
    participantId String  @map("participant_id") @db.Uuid
    amount        Decimal @db.Decimal(12, 2)
    weight        Decimal @db.Decimal(2, 2)

    // Relations
    participant User    @relation(fields: [participantId], references: [id])
    expense     Expense @relation(fields: [expenseId], references: [id])

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
    id   Int    @id @default(autoincrement())
    name String

    // Relations' lists
    expenses Expense[]

    // Timestamps
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("categories")
}
